# Workflow responsible for the 
# major release processes.
# Builds all associated services and 
# creates a release object in Github

name: Build-Push-Release
on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - README.md.old
      - .github/**
      - LICENSE
      - .gitignore
      - .dockerignore
    tags-ignore:
      - '*'
jobs:
  build-push-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }} 
        fetch-depth: 0

    - name: Set short git commit SHA
      id: vars
      run: |
        echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
    # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

    - name: Confirm git commit SHA output
      run: echo ${{ env.SHORT_SHA }}

    # https://github.com/marketplace/actions/git-semantic-version
    - name: Semver Check
      uses: paulhatch/semantic-version@v5.0.3
      id: version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "/breaking:|major:/"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: "ig"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "/feat:|feature:|minor:/"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: "ig"
        # A string to determine the format of the version output
        # version_format: "${major}.${minor}.${patch}-prerelease${increment}"
        version_format: "${major}.${minor}.${patch}"
        search_commit_body: false

    - name: Set Semver in Github Env 
      run: |
        echo "SEMVER=v${{ steps.version.outputs.version }}"
        echo "Sanity Check for Semver: $SEMVER"

    - name: Build-Api
      uses: ./.github/actions/build-service
      with:
        app-name: 'api'
        tag: '${{ env.SHORT_SHA }}'
        release-tag: '${{ env.SEMVER }}'

    - name: Build-Frontend
      uses: ./.github/actions/build-service
      with:
        app-name: 'frontend'
        tag: '${{ env.SHORT_SHA }}'
        release-tag: '${{ env.SEMVER }}'

    - name: Build-Pipeline
      uses: ./.github/actions/build-service
      with:
        app-name: 'pipeline'
        tag: '${{ env.SHORT_SHA }}'
        release-tag: '${{ env.SEMVER }}'

#==========================TAG & RELEASE W/ NOTES =========================

    # Note: GITHUB_TOKEN is autogenerated feature of github app
    # which is auto-enabled when using github actions.
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    # https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#create-a-tag-object
    # https://docs.github.com/en/rest/git/refs?apiVersion=2022-11-28#create-a-reference
    # This creates a "lightweight" ref tag.
    - name: Create Tag for Release
      run: |
        curl \
        -s --fail -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/${{ github.repository }}/git/refs \
        -d '{"ref":"refs/tags/v${{ steps.version.outputs.version }}","sha":"${{ github.sha }}"}'
        
#   https://cli.github.com/manual/gh_release_create
    - name: Create Release
      env:
        RELEASE_VERSION: ${{ steps.version.outputs.version }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ env.RELEASE_VERSION }} \
          -t "${{ env.RELEASE_VERSION }}" \
          --generate-notes \
          --latest