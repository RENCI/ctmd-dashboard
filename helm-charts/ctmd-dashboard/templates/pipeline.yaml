{{- if (eq (lower .Values.softwareContext) "development") }} 
apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-synthetic-data
data:
  # Retrieve the files from ctmd-dashboard/files dir
  {{ .Values.pipeline.config.syntheticDataFile }}: |-
{{ .Files.Get (printf "files/%s" .Values.pipeline.config.syntheticDataFile) | indent 4 }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: redcap-dictionary-data
data:
  # Retrieve the files from ctmd-dashboard/files dir
  {{ .Values.pipeline.config.redcapDataFile }}: |-
{{ .Files.Get (printf "files/%s" .Values.pipeline.config.redcapDataFile) | indent 4 }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ctmd-database-mapping
data:
  # Retrieve the files from ctmd-dashboard/files dir
  {{ .Values.pipeline.config.databaseMappingFile }}: |- 
{{ .Files.Get ( printf "files/%s" .Values.pipeline.config.databaseMappingFile) | indent 4 }}
---
# Backup location for postgres database
# Ideally this would be managed by a cron in k8s at some point.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-backups-pvc
  labels:
    app: {{ .Values.pipeline.name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.pipeline.recurringBackup.size }}
  storageClassName: {{ .Values.pipeline.recurringBackup.storageClass | default "standard" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: {{ .Values.pipeline.name }}
  name: {{ .Values.pipeline.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.pipeline.name }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.pipeline.name }}
    spec:
      # Ensure postgres is up, this is simplistic check for the service.
      # There are possible where the service could be up but the db stalls
      # "if" that becomes a problem change initContainer to something 
      # more robust (if it occurs).
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup {{ .Values.postgres.name }}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for db; sleep 2; done"]
      containers:
      - image: "{{ .Values.images.repository }}/{{ .Values.pipeline.name }}:{{ .Values.pipeline.tag | default .Chart.AppVersion }}"
        name: {{ .Values.pipeline.name }}
        ports:
        - containerPort: 5000
        env:
          - name: REDCAP_APPLICATION_TOKEN
            value: {{ .Values.pipeline.env.REDCAP_APPLICATION_TOKEN | quote }}
          - name: REDCAP_URL_BASE
            value: {{ .Values.pipeline.env.REDCAP_URL_BASE | quote }}
            # Dumppath uses recurringBackup values not from env section of values
            # this cooresponds with the pvc above which is mounted to volumesMounts
            # in this application.
          - name: POSTGRES_DUMP_PATH
            value: {{ .Values.pipeline.recurringBackup.backupPath | quote }}
          - name: AUXILIARY_PATH
            value: {{ .Values.pipeline.env.AUXILIARY_PATH | quote }}
          - name: FILTER_PATH
            value: {{ .Values.pipeline.env.FILTER_PATH | quote }}
          - name: BLOCK_PATH
            value: {{ .Values.pipeline.env.BLOCK_PATH | quote }}
          - name: RELOAD_SCHEDULE
            value: {{ .Values.pipeline.env.RELOAD_SCHEDULE | quote }}
          - name: RELOAD_DATABASE
            value: {{ .Values.pipeline.env.RELOAD_DATABASE | quote }}
          - name: SCHEDULE_RUN_TIME
            value: {{ .Values.pipeline.env.SCHEDULE_RUN_TIME | quote }}
          - name: SERVER
            value: {{ .Values.pipeline.env.SERVER | quote }}
          - name: REDIS_QUEUE_HOST
            value: {{ .Values.pipeline.env.REDIS_LOCK_HOST | quote }}
          - name: REDIS_QUEUE_PORT
            value: {{ .Values.pipeline.env.REDIS_QUEUE_PORT | quote }}
          - name: REDIS_QUEUE_DB
            value: {{ .Values.pipeline.env.REDIS_QUEUE_DB | quote }}
          - name: REDIS_LOCK_HOST
            value: {{ .Values.pipeline.env.REDIS_LOCK_HOST | quote }}
          - name: REDIS_LOCK_PORT
            value: {{ .Values.pipeline.env.REDIS_LOCK_PORT | quote }}
          - name: REDIS_LOCK_DB
            value: {{ .Values.pipeline.env.REDIS_LOCK_DB | quote }}
          - name: REDIS_LOCK_EXPIRE
            value: {{ .Values.pipeline.env.REDIS_LOCK_EXPIRE | quote }}
          - name: REDIS_LOCK_TIMEOUT
            value: {{ .Values.pipeline.env.REDIS_LOCK_TIMEOUT | quote }}
          - name: TASK_TIME
            value: {{ .Values.pipeline.env.TASK_TIME | quote }}
          - name: SPARK_EXECUTOR_MEMORY
            value: {{ .Values.pipeline.env.SPARK_EXECUTOR_MEMORY | quote }}
          - name: SPARK_DRIVER_MEMORY
            value: {{ .Values.pipeline.env.SPARK_DRIVER_MEMORY | quote }}
          - name: PAUSE
            value: {{ .Values.pipeline.env.PAUSE | quote }}
          - name: DOWNLOAD_REDCAP_DATA
            value: {{ .Values.pipeline.env.DOWNLOAD_REDCAP_DATA | quote }}
          - name: CREATE_TABLES
            value: {{ .Values.pipeline.env.CREATE_TABLES | quote }}
          - name: GLOBAL_WRITE_PERMISSIONS
            value: {{ .Values.pipeline.env.GLOBAL_WRITE_PERMISSIONS | quote }}
          - name: LOCAL_ENV
            value: {{ .Values.pipeline.env.LOCAL_ENV | quote }}
          # ConfigMap mounted file - see volumeMounts - here we mount at the root currently.
          {{- if (eq (lower .Values.softwareContext) "development") }} 
          - name: DATA_INPUT_FILE_PATH
            value: {{ printf "/%s" .Values.pipeline.config.syntheticDataFile | quote }}
          {{- end }}
        envFrom:
        # Mounts the database connection secrets
          - secretRef:
              name: {{ .Values.postgres.secrets.name }}
        resources: {}
        volumeMounts:
          {{- if (eq (lower .Values.softwareContext) "development") }} 
          - name: pipeline-synthetic-data
            mountPath: /{{ .Values.pipeline.config.syntheticDataFile }}  
            subPath: {{ .Values.pipeline.config.syntheticDataFile }}
          - name: redcap-dictionary-data
            mountPath: /{{ .Values.pipeline.config.redcapDataFile }}  
            subPath: {{ .Values.pipeline.config.redcapDataFile }}
          {{- end }}
          - name: ctmd-database-mapping
            mountPath: /{{ .Values.pipeline.config.databaseMappingFile }}  
            subPath: {{ .Values.pipeline.config.databaseMappingFile }}
          - name: db-backups-pvc
            mountPath: {{ .Values.pipeline.recurringBackup.backupPath }}  
      volumes:
      {{- if (eq (lower .Values.softwareContext) "development") }} 
        - name: pipeline-synthetic-data
          configMap:
            name: pipeline-synthetic-data
        - name: redcap-dictionary-data
          configMap:
            name: pipeline-synthetic-data
      {{- end }}
          # This volume uses the files/mapping.json file
        - name: ctmd-database-mapping
          configMap:
            name: ctmd-database-mapping
        - name: db-backups-pvc
          persistentVolumeClaim:
            claimName: db-backups-pvc

--- 
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ .Values.pipeline.name }}
  name: {{ .Values.pipeline.name }}
spec:
  ports:
  - port: {{ .Values.pipeline.service.port }}
    protocol: TCP
    targetPort: {{ .Values.pipeline.service.port }}
  selector:
    app: {{ .Values.pipeline.name }}

