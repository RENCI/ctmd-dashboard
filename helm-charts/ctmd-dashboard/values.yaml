# Default values for ctmd-dashboard. This is the parent chart to launch
# the full service. 
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/

# TODO (Phase 2): 
#  - postgres.persistence should support mounting existing pvc when deploying (currently does not).
#  - Add further security considerations - runAsRoot: false type stuff
#  - Develop mode should make use of syntheticDataset.json mount in /files dir
#       while prod deployment should not. Have an opinionated dev env
#

images:
  repository: containers.renci.org/ctmd
  tag: "latest"

serviceAccounts:
  create: false
  annotations: {}
  
networkPolicies:
  create: false 

securityContext:
  enable: false 

# Indicate whether this is production or development context
softwareContext: "develop" 

frontend:
  create: true
  name: ctmd-frontend
  # The ports are informational values and 
  # not used to change templates currently.
  service:
    type: ClusterIP
    port: 3000
    name: http
  env:
    NODE_ENV: "development"
    REACT_APP_IS_HEAL_SERVER: "false"
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi

api:
  create: true
  name: ctmd-api
  # The ports are informational values and 
  # not used to change templates currently.
  service:
    apiPort: 3030
    graphicsApiPort: 4040
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi
  # The below section will be environment vars in the application.
  env:
    # "development" or "production" same value as nodeEnvironment
    authEnvironment: "development"
    nodeEnvironment: "development"
    dashboardURL: "http://localhost:3000"
    reactAppAPIRoot: http://localhost/api/
    fuseAuthAPIKey: "SECRET"
    apiSessionSecret: "SECRET"
    authURL: "https://some-auth-url.com"

postgres:
  create: true
  name: ctmd-db
  # Will use a public docker image of postgres, otherwise uses images.repository/postgres.name.
  publicRepository: true
  # The ports are informational values and 
  # not used to change templates currently.
  service:
    port: 5432
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi
# This will create a secret object that is used to populate 
# environment variables with DSN information.
# This secret is also mounted in api, frontend, pipeline
  secrets:
    create: true
    name: "db-dsn"
    database: "postgres" 
    user: "ctmd-user"
    password: "password123"
  persistence:
    # create: true (Phase 2 work)
    # name: mountName (Phase 2 work)
    # To use the default provisioner leave storageClass blank.
    storageClass: ""
    # To use default of 1Gi (dev mode) leave blank.
    size: "1Gi"
    

redis:
  create: true
  name: ctmd-redis
  # Will use a public docker image of redis, otherwise uses images.repository/redis.name.
  publicRepository: true
  # The ports are informational values and 
  # not used to change templates currently.
  service:
    port: 6379
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi

pipeline:
  create: true
  name: ctmd-pipeline
  # The ports are informational values and 
  # not used to change templates currently.
  service:
    port: 5000
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi
  persistence:
    storageClass: ""
    size: "1Gi"
  recurringBackup:
    backupPath: "/backup" 
    storageClass: "" 
    size: "2Gi"
  config:
    # The file being referenced is located in ctmd-dashboard/files/ 
    syntheticDataFile: "syntheticDataset.json"
    databaseMappingFile: "mapping.json"
  env:
    REDCAP_APPLICATION_TOKEN: "faketoken"
    REDCAP_URL_BASE: "https://redcap.vumc.org/api/"
    POSTGRES_DUMP_PATH: "/backup"
    AUXILIARY_PATH: "/auxiliary"
    FILTER_PATH: "/filter"
    BLOCK_PATH: "./block"
    RELOAD_SCHEDULE: "0"
    RELOAD_DATABASE: "0"
    SCHEDULE_RUN_TIME: "00:00"
    SERVER: "1"
    REDIS_QUEUE_HOST: "ctmd-redis"
    REDIS_QUEUE_PORT: "6379"
    REDIS_QUEUE_DB: "0"
    REDIS_LOCK_HOST: "ctmd-redis"
    REDIS_LOCK_PORT: "6379"
    REDIS_LOCK_DB: "1"
    REDIS_LOCK_EXPIRE: "7200"
    REDIS_LOCK_TIMEOUT: "7200"
    TASK_TIME: "7200"
    SPARK_EXECUTOR_MEMORY: "8g"
    SPARK_DRIVER_MEMORY: "8g"
    PAUSE: "0"
    DOWNLOAD_REDCAP_DATA: "0"
    CREATE_TABLES: "1"
    GLOBAL_WRITE_PERMISSIONS: "none"
    LOCAL_ENV: "true"
