# Default values for ctmd-dashboard. This is the parent chart to launch
# the full service. 
# Helm treats empty string as valid so to use defaults, leave completely blank.
# Areas where defaults can be used will be explicitly commented.

# TODO (Phase 2): 
#  - postgres.persistence should support mounting existing pvc when deploying (currently does not).
#  - Add further security considerations - runAsRoot: false type stuff
#  - Develop mode should make use of syntheticDataset.json mount in /files dir
#       while prod deployment should not. Have an opinionated dev env
#  - Still trying to understand pipeline envs AUXILLARY_PATH, FILTER_PATH, BLOCK_PATH
#

images:
  repository: containers.renci.org/ctmd

serviceAccounts:
  create: false
  annotations: {}
  
networkPolicies:
  create: false 

securityContext:
  enable: false 

# Indicate whether this is [production || development] context
# This value will affect the application configurations globally
# for the appropriate settings.
softwareContext: "development"

# When softwareContext is "production" enable this app
auth: 
  create: false
  name: "ctmd-auth"
  service:
    port: 8080
  env:
    PROVIDERS: '{"venderbilt":{"AUTH_URL":"https://redcap.vumc.org/plugins/TIN/sso/check_login"}}'
    API_KEY: ""



frontend:
# May need to template out nginx.conf for frontend
  create: true
  name: "ctmd-frontend"
  tag: "dev-k8s-prod"
  service:
    port: 3000
    name: http
  ingress: # for production
    create: false
  env:
    REACT_APP_API_ROOT: "http://ctmd-api:3030/" # specify the location of api endpoint service
    REACT_APP_DATA_API_ROOT: "http://ctmd-pipeline:5000/" # specify the location of the pipeline service
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi

api:
  create: true
  name: ctmd-api
  tag: "dev-k8s"
  service:
    apiPort: 3030
    graphicsApiPort: 4040
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi
  # The below section will be environment vars in the application.
  env:
    # "development" or "production" same values as NODE_ENV
    AUTH_ENV: "development"
    NODE_ENV: "development"
    DASHBOARD_URL: "http://ctmd-frontend:3000/"
    REACT_APP_API_ROOT: "http://ctmd-api:3030/"
    FUSE_AUTH_API_KEY: "superlongsecret"
    API_SESSION_SECRET: "something-secret"
    AUTH_URL: "https://some-auth-url.com" # production only

postgres:
  create: true
  name: ctmd-db
  # Tag is used for both non-public and public versions of the image muy flexible.
  tag: "11.22-alpine"
  # Will use a public docker image of postgres, otherwise uses images.repository/postgres.name.
  publicRepository: true
  # The port is informational values and 
  # not used to change template currently.
  service:
    port: 5432
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi
# This will create a secret object that is used to populate 
# environment variables with DSN information.
# This secret is also mounted in api, frontend, pipeline
  secrets:
    create: true
    name: "db-dsn"
    database: "postgres" 
    user: "ctmd-user"
    password: "password123"
  persistence:
    # create: true (Phase 2 work)
    # name: mountName (Phase 2 work)
    # To use the default provisioner leave storageClass blank.
    storageClass: ""
    # To use default of 1Gi (dev mode) leave blank.
    size: "1Gi"
    

redis:
  create: true
  name: ctmd-redis
  # Tag is used for both non-public and public versions of the image for muy flexible.
  tag: "latest"
  # Will use a public docker image of redis, otherwise uses images.repository/redis.name.
  publicRepository: true
  # The port is informational value and 
  # not used to change template currently.
  service:
    port: 6379
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi

pipeline:
  create: true
  name: ctmd-pipeline
  tag: "latest"
  service:
    port: 5000
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 300Mi
  # persistence:
  #   storageClass: 
  #   size: "1Gi"
  recurringBackup:
    backupPath: "/backups" 
    storageClass:  # Leave blank for default "standard"
    size: "1Gi"
  config:
    # The file being referenced is located in ctmd-dashboard/files/ 
    syntheticDataFile: "syntheticDataset.json"
    databaseMappingFile: "mapping.json"
  env:
    REDCAP_APPLICATION_TOKEN: "faketoken"
    REDCAP_URL_BASE: "https://redcap.vumc.org/api/"
    AUXILIARY_PATH: "/auxiliary"
    FILTER_PATH: "/filter"
    BLOCK_PATH: "./block"
    RELOAD_SCHEDULE: "0"
    RELOAD_DATABASE: "0"
    SCHEDULE_RUN_TIME: "00:00"
    SERVER: "1"
    REDIS_QUEUE_HOST: "ctmd-redis"
    REDIS_QUEUE_PORT: "6379"
    REDIS_QUEUE_DB: "0"
    REDIS_LOCK_HOST: "ctmd-redis"
    REDIS_LOCK_PORT: "6379"
    REDIS_LOCK_DB: "1"
    REDIS_LOCK_EXPIRE: "7200"
    REDIS_LOCK_TIMEOUT: "7200"
    TASK_TIME: "7200"
    SPARK_EXECUTOR_MEMORY: "8g"
    SPARK_DRIVER_MEMORY: "8g"
    PAUSE: "0"
    DOWNLOAD_REDCAP_DATA: "0"
    CREATE_TABLES: "1"
    GLOBAL_WRITE_PERMISSIONS: "none"
    LOCAL_ENV: "true"
